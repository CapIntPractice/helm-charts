# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

controller: "deployment"
replicaCount: 1
version: ""

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podDisruptionBudget:
  enabled: false
  minAvailable : 1

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
  - name: http
    num: 8080
    targetPort: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  scaleDown:
    stabilizationWindowSeconds: 300

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity:
  podAffinity: {}
  nodeAffinity: {}
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []
  
readinessProbe: {}
livenessProbe: {}
startupProbe: {}

externalSecrets: []

healthcheck: "http"

virtualService:
  enabled: false
  routes: []

configmaps: []

additionalContainers: []

annotations: {}

lifecycle: {}
  # Allows us to define lifecycle hooks
  # lifecycle:
  #       postStart:
  #         exec:
  #           command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
  #       preStop:
  #         exec:
  #           command: ["/bin/sh","-c","nginx -s quit; while killall -0 nginx; do sleep 1; done"]


volumeClaimTemplates: []

terminationGracePeriodSeconds: 30

ports:
- name: http
  num: 8080

test:
  enabled: false
  image: ""
  imagePullPolicy: IfNotPresent
  command: []
  args: []
  env: []
  restartPolicy: Never
  podAnnotations: {}

priorityClass:
  enabled: false
  name: ""
  value: 0
  globalDefault: false

keda:
  enabled: false
  minReplicaCount: 1
  maxReplicaCount: 5
  triggers: []

topologySpreadConstraints: []